vtemplate#v-student
  .container-fluid.home-student-bg
      .row.mb-5
        .col.p-0
          nav.navbar.navbar-expand-lg.navbar-light.bg-light
            a#logo.text-dark(href='#') MUSIC ACADEMY
              button.navbar-toggler(type='button' data-toggle='collapse' data-target='#navbarSupportedContent' aria-controls='navbarSupportedContent' aria-expanded='false' aria-label='Toggle navigation')
                span.navbar-toggler-icon
              #navbarSupportedContent.collapse.navbar-collapse
                ul.navbar-nav.ml-auto
                  li.nav-item.active
                    a.nav-link.text-dark(href='#') Home
                  li.nav-item
                    a.nav-link.text-dark(href='#') About
      .row.mt-5.mb-5.justify-content-center
        .col-3
          button.btn.btn-outline-dark.btn-lg(v-on:click="$emit('generate_random')") Get Random Sequence
        .col-3
          button.btn.btn-outline-dark.btn-lg(v-on:click="$emit('play_sequence')") Play Sequence
        .col-3
          button.btn.btn-outline-dark.btn-lg(v-on:click="$emit('play_and_record_sequence')") Play and Record Sequence
        .col-3
          audio#solution-audio(controls="")

      //- .row.mt-5
      //-   .col-2
      //-     .p
      //-   .col-2
      //-     .p.border.square.text-center(v-bind:class="{ inactive: is_one_inactive }")
      //-       img.p-2(v-bind:src="box_one_img")
      //-   .col-2
      //-     .p.border.square.text-center(v-bind:class="{ inactive: is_two_inactive }")
      //-       img.p-2(v-bind:src="box_two_img")
      //-   .col-2
      //-     .p.border.square.text-center(v-bind:class="{ inactive: is_three_inactive }")
      //-       img.p-2(v-bind:src="box_three_img")
      //-   .col-2
      //-     .p.border.square.text-center(v-bind:class="{ inactive: is_four_inactive }")
      //-       img.p-2(v-bind:src="box_four_img")
      //-   .col-2
      //-     .p

      .row.recording.mt-5
        .col
          .row
            .col.text-center
              canvas.visualizer(height='60px')
          .row.mt-2
            .col-6.text-right
              button.record.btn.btn-outline-light.btn-lg Record
            .col-6.text-left
              button.stop.btn.btn-outline-light.btn-lg Stop
      
      .row.sound-clips

      .row
        .col
          //- .vexbox
          #boo


script.
  comps.load("v-student")
  comps.update('v-student', {
    data() {
      return {
        //- admin_pass: '',
        //- selected_one: '',
        //- selected_two: '',
        //- selected_three: '',
        //- selected_four: '',
        //- box_one_img: 'resources/transparent.png',
        //- box_two_img: 'resources/transparent.png',
        //- box_three_img: 'resources/transparent.png',
        //- box_four_img: 'resources/transparent.png',
        //- is_one_inactive: true,
        //- is_two_inactive: true,
        //- is_three_inactive: true,
        //- is_four_inactive: true
      };
    },
    mounted() {
      //- const vf = new Vex.Flow.Factory({
      //-   renderer: {elementId: 'boo', width: 500, height: 200}
      //- });

      //- const score = vf.EasyScore();
      //- const system = vf.System();

      //- system.addStave({
      //-   voices: [
      //-     score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),
      //-     score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))
      //-   ]
      //- }).addClef('treble').addTimeSignature('4/4');

      //- system.addStave({
      //-   voices: [
      //-     score.voice(score.notes('C#3/q, B2, A2/8, B2, C#3, D3', {clef: 'bass', stem: 'up'})),
      //-     score.voice(score.notes('C#2/h, C#2', {clef: 'bass', stem: 'down'}))
      //-   ]
      //- }).addClef('bass').addTimeSignature('4/4');

      //- system.addConnector()

      //- vf.draw();

      VF = Vex.Flow;

      // Create an SVG renderer and attach it to the DIV element named "boo".
      var div = document.getElementById("boo")
      var renderer = new VF.Renderer(div, VF.Renderer.Backends.SVG);

      // Size our SVG:
      renderer.resize(500, 500);

      // And get a drawing context:
      var context = renderer.getContext();

      // Create a stave at position 10, 40 of width 400 on the canvas.
      var stave = new VF.Stave(10, 40, 400);

      // Add a clef and time signature.
      stave.addClef("treble").addTimeSignature("4/4");

      // Connect it to the rendering context and draw!
      stave.setContext(context).draw();

      var notes = [
        new VF.StaveNote({clef: "treble", keys: ["c/5"], duration: "q" }),
        new VF.StaveNote({clef: "treble", keys: ["d/4"], duration: "q" }),
        new VF.StaveNote({clef: "treble", keys: ["b/4"], duration: "qr" }),
        new VF.StaveNote({clef: "treble", keys: ["c/4", "e/4", "g/4"], duration: "q" })
      ];

      var notes2 = [
        new VF.StaveNote({clef: "treble", keys: ["c/4"], duration: "w" })
      ];

      // Create a voice in 4/4 and add the notes from above
      var voices = [
        new VF.Voice({num_beats: 4,  beat_value: 4}).addTickables(notes),
        new VF.Voice({num_beats: 4,  beat_value: 4}).addTickables(notes2)]

      // Format and justify the notes to 400 pixels.
      var formatter = new VF.Formatter().joinVoices(voices).format(voices, 400);

      // Render voices
      voices.forEach(function(v) { v.draw(context, stave); })

      //- this.$on('generate_random', () => {
      //-   choices = ['quaver', 'semi_quaver', 'triplets', 'rest'];
      //-   var one = choices[getRandomInt(4)];
      //-   var two = choices[getRandomInt(4)];
      //-   var three = choices[getRandomInt(4)];
      //-   var four = choices[getRandomInt(4)];
      //-   this.box_one_img = `resources/${one}.png`;
      //-   this.box_two_img = `resources/${two}.png`;
      //-   this.box_three_img = `resources/${three}.png`;
      //-   this.box_four_img = `resources/${four}.png`;
      //-   this.selected_one = one;
      //-   this.selected_two = two;
      //-   this.selected_three = three;
      //-   this.selected_four = four;
      //- });

      this.$on('play_and_record_sequence', () => {
        const audio = document.getElementById('solution-audio');
        tone.init(true);
        tone.createAndRecordSequence(60, ["c/5/16", "c/5/16", "c/5/8", "c/5/8d", "c/5/16", "c/5/qr", "c/5/16", "c/5/16", "c/5/16r", "c/5/16"], 2, audio);
      })

      //- this.$on('play_sequence', () => {
      //-   if (this.selected_one === '' || this.selected_two === '' || this.selected_three === '' || this.selected_four === '') {
      //-     return
      //-   } else {
      //-     var audio = new Audio()
      //-     audio_files = [`resources/${this.selected_one}.wav`, `resources/${this.selected_two}.wav`, `resources/${this.selected_three}.wav`, `resources/${this.selected_four}.wav`]
      //-     var index = 0;
      //-     audio.src=`resources/${this.selected_one}.wav`;
      //-     this.is_one_inactive = false;
      //-     audio.play();
      //-     index++;

      //-     audio.onended = () => {
      //-         if (index < 4) {
      //-             switch(index) {
      //-               case 1:
      //-                 this.is_one_inactive = true;
      //-                 this.is_two_inactive = false;
      //-                 break;
      //-               case 2:
      //-                 this.is_two_inactive = true;
      //-                 this.is_three_inactive = false;
      //-                 break;
      //-               case 3:
      //-                 this.is_three_inactive = true;
      //-                 this.is_four_inactive = false;
      //-                 break;
      //-               default:
      //-                 // code block
      //-             }
      //-             audio.src=audio_files[index];
      //-             audio.play();
      //-             index++;
      //-         } else {
      //-           this.is_four_inactive = true;
      //-         }
      //-     };
      //-   }
      //- })
    }
  })