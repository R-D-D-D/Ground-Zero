vtemplate#v-student
  .container-fluid.home-student-bg
      .row.mb-5
        .col.p-0
          nav.navbar.navbar-expand-lg.navbar-light.bg-light
            a#logo.text-dark(href='#') MUSIC ACADEMY
              button.navbar-toggler(type='button' data-toggle='collapse' data-target='#navbarSupportedContent' aria-controls='navbarSupportedContent' aria-expanded='false' aria-label='Toggle navigation')
                span.navbar-toggler-icon
              #navbarSupportedContent.collapse.navbar-collapse
                ul.navbar-nav.ml-auto
                  li.nav-item.active
                    a.nav-link.text-dark(href='#') Home
                  li.nav-item
                    a.nav-link.text-dark(href='#') About
      .row.mt-5.mb-5.justify-content-center
        .col-3
          button.btn.btn-outline-dark.btn-lg(v-on:click="$emit('generate_random')") Get Random Sequence
        .col-3
          button.btn.btn-outline-dark.btn-lg(v-on:click="$emit('play_sequence')") Play Sequence
        .col-3
          button.btn.btn-outline-dark.btn-lg(v-on:click="$emit('play_and_record_sequence')") Play and Record Sequence
        .col-3
          audio#solution-audio(controls="")

      //- .row.mt-5
      //-   .col-2
      //-     .p
      //-   .col-2
      //-     .p.border.square.text-center(v-bind:class="{ inactive: is_one_inactive }")
      //-       img.p-2(v-bind:src="box_one_img")
      //-   .col-2
      //-     .p.border.square.text-center(v-bind:class="{ inactive: is_two_inactive }")
      //-       img.p-2(v-bind:src="box_two_img")
      //-   .col-2
      //-     .p.border.square.text-center(v-bind:class="{ inactive: is_three_inactive }")
      //-       img.p-2(v-bind:src="box_three_img")
      //-   .col-2
      //-     .p.border.square.text-center(v-bind:class="{ inactive: is_four_inactive }")
      //-       img.p-2(v-bind:src="box_four_img")
      //-   .col-2
      //-     .p

      .row.m-0.p-0.justify-content-center
        .col.m-0.p-0
          #vexflow-wrapper.text-center
          
      .row.recording.mt-5
        .col
          .row
            .col.text-center
              canvas.visualizer(height='60px')
          .row.mt-2
            .col-6.text-right
              button.record.btn.btn-outline-dark.btn-lg Record
            .col-6.text-left
              button.stop.btn.btn-outline-dark.btn-lg Stop
      
      .row.sound-clips

      //- .row
      //-   .col
      //-     //- .vexbox
      //-     #boo



script.
  comps.load("v-student")
  comps.update('v-student', {
    data() {
      return {
        //- admin_pass: '',
        //- selected_one: '',
        //- selected_two: '',
        //- selected_three: '',
        //- selected_four: '',
        //- box_one_img: 'resources/transparent.png',
        //- box_two_img: 'resources/transparent.png',
        //- box_three_img: 'resources/transparent.png',
        //- box_four_img: 'resources/transparent.png',
        //- is_one_inactive: true,
        //- is_two_inactive: true,
        //- is_three_inactive: true,
        //- is_four_inactive: true,
        handler: {}
      };
    },
    mounted() {
      //- const BAR_WIDTH = 280;
      //- const BAR_HEIGHT = 100;
      //- const BARS_PER_ROW = 2;

      //- const CLEF = 'treble';
      //- const NOTE = 'c/4';

      //- VF = Vex.Flow;

      //- // Create an SVG renderer and attach it to the DIV element named "boo".
      //- var div = document.getElementById("boo")
      //- var renderer = new VF.Renderer(div, VF.Renderer.Backends.SVG);

      //- // Size our SVG:
      //- renderer.resize(1000, 400);

      //- // And get a drawing context:
      //- var context = renderer.getContext();

      //- // Create a stave at position 10, 40 of width 400 on the canvas.
      //- var stave = new VF.Stave(10, 40, 800);

      //- // Add a clef and time signature.
      //- stave.addClef("treble").addTimeSignature("4/4");

      //- // Connect it to the rendering context and draw!
      //- stave.setContext(context).draw();

      //- var notes = [
      //-   new VF.StaveNote({clef: "treble", keys: ["c/5"], duration: "q" }),
      //-   new VF.StaveNote({clef: "treble", keys: ["d/4"], duration: "8" }),
      //-   new VF.StaveNote({clef: "treble", keys: ["d/4"], duration: "8" }),
      //-   new VF.StaveNote({clef: "treble", keys: ["b/4"], duration: "qr" }),
      //-   new VF.StaveNote({clef: "treble", keys: ["c/4", "e/4", "g/4"], duration: "q" }),
      //-   new VF.BarNote(),
      //-   new VF.StaveNote({clef: "treble", keys: ["c/5"], duration: "q" }),
      //-   new VF.StaveNote({clef: "treble", keys: ["d/4"], duration: "q" }),
      //-   new VF.StaveNote({clef: "treble", keys: ["b/4"], duration: "qr" }),
      //-   new VF.StaveNote({clef: "treble", keys: ["c/4", "e/4", "g/4"], duration: "q" })
      //- ];

      //- // Create a voice in 4/4 and add the notes from above
      //- var voices = [new VF.Voice({num_beats: 8,  beat_value: 4}).addTickables(notes)]

      //- // Format and justify the notes to 400 pixels.
      //- var formatter = new VF.Formatter().joinVoices(voices).format(voices, 800);

      //- // Render voices
      //- voices.forEach(function(v) { v.draw(context, stave); })
      this.handler = new Vex.UI.Handler("vexflow-wrapper").init();

      this.$on('play_and_record_sequence', () => {
        const audio = document.getElementById('solution-audio');
        tone.init(true);
        tone.createAndRecordSequence(60, this.handler.exportNotes(), 2, audio);
      });

      this.$on('play_sequence', () => {
        console.log(this.handler.exportNotes());
      })
    }
  })